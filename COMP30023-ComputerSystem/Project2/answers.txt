Name: Zhuoyang Hao
Login id: zhuoyangh
Student id: 1255309

Protocol Description:

1. Conncetion: The server accepts incoming TCP connections from clients. 
Once the connection is established, the client can start sending RPC requests to the server.

2. Request Format: The client sends a RPC request in the format "FIND|function_name" or "CALL|function_name".

3. FIND operation: If the request is in FIND, the server will look for the registered functions and repond 
with "OK|function_name" or "ERROR|function not found".

4. CALL operation: If the request is CALL, the client will check if the result is valid 
and then send data1, data2_len, and data2 to the server.

5. Result: The server deserialize the data and call the corresponding function, checking if result is valid,
and then send the result with data1, data2_len and data2 back to client.

6. Encoding: The data1 and data2_len are encoded to uint64_t to send through because uint64_t is platform independent and consistent.

7. Error Handling: Server and Client will both check the error. If error occurs, they will send appropriate error messages.

Questions:

1. Should the server accept calls from everyone, or just a subset of users?
In this project, the server accept calls from everyone. But in the real world, the server should only receive response 
from authenticated users.

2. Should authentication etc. be provided by the RPC framework, or by the functions that use the RPC framework?
It should be provided by the RPC framework.

3. What transport layer protocol should be used? What are the trade-offs?
TCP is stream-oriented, reliable and in-order so it should be used. However it has more overhead from its features and reliability.

4. In which function(s) should the socket(s) be created?
The sockets should be created in rpc_init_client and rpc_init_server, these are functions responsible for establishing the rpc system.

5. Should rpc_client and rpc_server be allocated dynamically or statically? What are the implications for the client and server code?
Both can be used but in my implementiation they are allocated statically. Dyanamically allocation can support more flexibility and support.
Since the client and server are known and constant so i allocate them statically.

6. What happens if one host uses big-endian byte order and the other uses little-endian? How does that relate to “network byte order”?
If one hose uses big-endian byte order and the other uses another, without byte order conversion, it will cause the data being decoded
incorrectly.
